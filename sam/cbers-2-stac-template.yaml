AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Update CBERS static STAC catalog'

Globals:
  Function:
    Runtime: python3.6
    Environment:
      Variables:
        CBERS_PDS_BUCKET: cbers-pds
        CBERS_META_PDS_BUCKET: cbers-meta-pds
        CBERS_STAC_BUCKET: cbers-stac
        MESSAGE_BATCH_SIZE: 0
        DELETE_MESSAGES: 1

Resources:

  #################################################
  # Loggroup start
  #################################################

  TaskLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7

  #################################################
  # Loggroup end
  #################################################

  #################################################
  # Roles start
  #################################################

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"
        # @todo check if ReadOnlyAccess is needed with FullAccess
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AWSBatchFullAccess"
        - "arn:aws:iam::aws:policy/AWSStepFunctionsConsoleFullAccess"
        - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
        - "arn:aws:iam::aws:policy/AmazonAthenaFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
      Path: "/"

  #################################################
  # Roles end
  #################################################

  #################################################
  # SNS Topic start
  #################################################

  # @todo allow everybody to subscribe to topic
  CBERSSTACItemTopic:
    Type: 'AWS::SNS::Topic'

  #################################################
  # SNS Topic End
  #################################################

  #################################################
  # SQS(with triggers)/Subscription start 
  #################################################

  NewScenesQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60

  # This queue is subscribed to topics from all quicklooks,
  # PAN5 and PAN10 are ignored for now
  NewMUXSceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4MUXQuicklook'

  NewAWFISceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4AWFIQuicklook'

  NewPAN10SceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4PAN10MQuicklook'

  NewPAN5SceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4PAN5MQuicklook'

  NewSceneQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action: 'SQS:SendMessage'
          Resource: !GetAtt NewScenesQueue.Arn
          Condition:
            # @todo improve by specifying only the allowed Arns, removing '*'
            ArnEquals:
              aws:SourceArn: 'arn:aws:sns:us-east-1:769537946825:*'
      Queues:
        - !Ref NewScenesQueue

  NewScenesQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      # @todo try to increase batch size depending on measured
      # lambda execution time
      BatchSize: 10
      EventSourceArn: !GetAtt [NewScenesQueue, Arn]
      FunctionName: !Ref ProcessNewSceneQueueFunction

  # This queue expects messages of S3 prefixes
  # Each prefix is searched for .jpg files and a message
  # emulating a 'NewScene' is emulated and sent to the queue responible
  # to update the static STAC catalog
  ReconcileQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 300

  ReconcileQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      # @todo try to increase batch size depending on measured
      # lambda execution time
      BatchSize: 1
      EventSourceArn: !GetAtt [ReconcileQueue, Arn]
      FunctionName: !Ref ConsumeReconcileQueueFunction

  # This queue receives the new STAC item keys, consumed
  # by UpdateCatalogTreeFunction
  CatalogUpdateQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 30

  #################################################
  # SQS/Subscription end
  #################################################

  #################################################
  # Lambda start (include dead letter queues)
  #################################################

  GeneralLambdaDLQ: 
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  ProcessNewSceneQueueFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: process_new_scene_queue
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: Process new scenes in queue
      # This timeout is suitable for SQS/Lambda triggers,
      # which is limited to 10 messages per lambda call
      Timeout: 55
      Environment:
        Variables:
          SNS_TARGET_ARN: !Ref CBERSSTACItemTopic
          CATALOG_UPDATE_QUEUE: !Ref CatalogUpdateQueue
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  PopulateReconcileQueueFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: populate_reconcile_queue
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: Populates reconcile queue with S3 keys from a common prefix
      Timeout: 300
      Environment:
        Variables:
          RECONCILE_QUEUE: !Ref ReconcileQueue
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  UpdateCatalogTreeFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: update_catalog_tree
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies:
      Description: Consume from CatalogUpdate queue and update the catalog structure one message at a time
      Timeout: 300
      Environment:
        Variables:
          CATALOG_UPDATE_QUEUE: !Ref CatalogUpdateQueue
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  ConsumeReconcileQueueFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: consume_reconcile_queue
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: Consume dirs from reconcile queue, populating NewScenesQueue with quicklooks to be processed
      # @todo adjust timeout based on lambda execution time measurements
      Timeout: 295
      Environment:
        Variables:
          NEW_SCENES_QUEUE: !Ref NewScenesQueue
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  #################################################
  # Lambda end
  #################################################

  #################################################
  # Rule start
  #################################################

  ProcessCatalogTreeUpdateQueue:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Process catalog tree update every hour'
      State: 'ENABLED'
      ScheduleExpression: 'cron(50 */1 * * ? *)'
      Targets:
      - Arn: !GetAtt UpdateCatalogTreeFunction.Arn
        Id: "PRCTUQUEUE"

  ProcessCatalofTreeUpdateQueuePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ProcessNewSceneQueueFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt ProcessCatalogTreeUpdateQueue.Arn

  #################################################
  # Rule end
  #################################################
