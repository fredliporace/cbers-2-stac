AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Update CBERS static STAC catalog'

Globals:
  Function:
    Runtime: python3.6
    Environment:
      Variables:
        CBERS_PDS_BUCKET: cbers-pds
        CBERS_META_PDS_BUCKET: cbers-meta-pds
        CBERS_STAC_BUCKET: cbers-stac
        MESSAGE_BATCH_SIZE: 0
        DELETE_MESSAGES: 1

Resources:

  #################################################
  # Loggroup start
  #################################################

  TaskLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7

  #################################################
  # Loggroup end
  #################################################

  #################################################
  # Roles start
  #################################################

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"
        # @todo check if ReadOnlyAccess is needed with FullAccess
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AWSBatchFullAccess"
        - "arn:aws:iam::aws:policy/AWSStepFunctionsConsoleFullAccess"
        - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
        - "arn:aws:iam::aws:policy/AmazonAthenaFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
      Path: "/"

  #################################################
  # Roles end
  #################################################

  #################################################
  # S3 start
  #################################################

  # @todo this does not work because cloudformation tries to
  # create a new bucket
  #CBERSS3:
  #  Type: AWS::S3::Bucket
  #  Properties:
  #    BucketName: cbers-pds

  #################################################
  # S3 end
  #################################################

  #################################################
  # SNS Topic start
  #################################################

  # @todo allow everybody to subscribe to topic
  CBERSSTACItemTopic:
    Type: 'AWS::SNS::Topic'

  #################################################
  # SNS Topic End
  #################################################

  #################################################
  # SQS/Subscription start 
  #################################################

  NewMUXScenesQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  MUXNewSceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewMUXScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4MUXQuicklook'

  NewMUXSceneQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action: 'SQS:SendMessage'
          Resource: !GetAtt NewMUXScenesQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4MUXQuicklook'
      Queues:
        - !Ref NewMUXScenesQueue

  NewAWFIScenesQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  AWFINewSceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewAWFIScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4AWFIQuicklook'

  NewAWFISceneQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action: 'SQS:SendMessage'
          Resource: !GetAtt NewAWFIScenesQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4AWFIQuicklook'
      Queues:
        - !Ref NewAWFIScenesQueue

  NewPAN10MScenesQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  PAN10MNewSceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewPAN10MScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4PAN10MQuicklook'

  NewPAN10MSceneQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action: 'SQS:SendMessage'
          Resource: !GetAtt NewPAN10MScenesQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4PAN10MQuicklook'
      Queues:
        - !Ref NewPAN10MScenesQueue

  NewPAN5MScenesQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  PAN5MNewSceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewPAN5MScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4PAN5MQuicklook'

  NewPAN5MSceneQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action: 'SQS:SendMessage'
          Resource: !GetAtt NewPAN5MScenesQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: 'arn:aws:sns:us-east-1:769537946825:NewCB4PAN5MQuicklook'
      Queues:
        - !Ref NewPAN5MScenesQueue

  #################################################
  # SQS/SNS end
  #################################################

  #################################################
  # Lambda start (include dead letter queues)
  #################################################

  GeneralLambdaDLQ: 
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  ProcessNewSceneQueueFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: process_new_scene_queue
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: Process new scenes in queue
      Timeout: 300
      Environment:
        Variables:
          SNS_TARGET_ARN: !Ref CBERSSTACItemTopic
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  #################################################
  # Lambda end
  #################################################

  #################################################
  # Rule start
  #################################################

  ProcessMUXQueue:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Process MUX Queue once a day'
      State: 'ENABLED'
      ScheduleExpression: 'cron(50 23 * * ? *)'
      Targets:
      - Arn: !GetAtt ProcessNewSceneQueueFunction.Arn
        Id: "PRMUXQUEUE"
        Input: !Sub
          |-
            {"queue":"${NewMUXScenesQueue}"}

  ProcessMUXQueuePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ProcessNewSceneQueueFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt ProcessMUXQueue.Arn

  ProcessAWFIQueue:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Process AWFI Queue once a day'
      State: 'ENABLED'
      ScheduleExpression: 'cron(50 23 * * ? *)'
      Targets:
      - Arn: !GetAtt ProcessNewSceneQueueFunction.Arn
        Id: "PRMUXQUEUE"
        Input: !Sub
          |-
            {"queue":"${NewAWFIScenesQueue}"}

  ProcessAWFIQueuePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ProcessNewSceneQueueFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt ProcessAWFIQueue.Arn

  #################################################
  # Rule end
  #################################################
