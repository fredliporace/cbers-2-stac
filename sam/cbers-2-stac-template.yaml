AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Update CBERS STAC catalog'

Parameters:
  STACBucket:
    Type: String
  OperatorEmail:
    Type: String

Globals:
  Function:
    Runtime: python3.6
    Environment:
      Variables:
        CBERS_PDS_BUCKET: cbers-pds
        CBERS_META_PDS_BUCKET: cbers-meta-pds
        CBERS_STAC_BUCKET: !Ref STACBucket
        MESSAGE_BATCH_SIZE: 0
        DELETE_MESSAGES: 1

Resources:

  #################################################
  # Loggroup start
  #################################################

  TaskLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7

  #################################################
  # Loggroup end
  #################################################

  #################################################
  # Roles start
  #################################################

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"
        # @todo check if ReadOnlyAccess is needed with FullAccess
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      Path: "/"

  #################################################
  # Roles end
  #################################################

  #################################################
  # SNS Topic start
  #################################################

  # @todo allow everybody to subscribe to topic
  CBERSSTACItemTopic:
    Type: 'AWS::SNS::Topic'

  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - 
          Endpoint: !Ref OperatorEmail
          Protocol: "email"

  #################################################
  # SNS Topic End
  #################################################

  #################################################
  # Cloudwatch start
  #################################################

  DLQDepthAlarmProcessNewScene:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'ProcessNewSceneQueueFunctionDLQ with more than one message'
      ActionsEnabled: True
      Namespace: 'AWS/SQS'
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Dimensions:
        - Name: 'QueueName'
          Value: !GetAtt ProcessNewSceneQueueFunctionDLQ.QueueName
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0.0
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - !Ref AlarmTopic
      # See comment in sqs_keep_alive for rationale behind
      # removing this alarm action
      #InsufficientDataActions:
      #  - !Ref AlarmTopic

  DLQDepthAlarmConsumeReconcile:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'ConsumeReconcileQueueFunctionDLQ with more than one message'
      ActionsEnabled: True
      Namespace: 'AWS/SQS'
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Dimensions:
        - Name: 'QueueName'
          Value: !GetAtt ConsumeReconcileQueueFunctionDLQ.QueueName
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0.0
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - !Ref AlarmTopic

  DLQDepthGeneral:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'GeneralDLQ with more than one message'
      ActionsEnabled: True
      Namespace: 'AWS/SQS'
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Dimensions:
        - Name: 'QueueName'
          Value: !GetAtt GeneralLambdaDLQ.QueueName
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0.0
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - !Ref AlarmTopic

  #################################################
  # Cloudwatch end
  #################################################

  #################################################
  # SQS(with triggers)/Subscription start 
  #################################################

  NewScenesQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn:    
            "Fn::GetAtt":
              - ProcessNewSceneQueueFunctionDLQ
              - Arn                     
        maxReceiveCount: 1

  # This queue is subscribed to topics from all quicklooks,
  # PAN5 and PAN10 are ignored for now
  NewMUXSceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:599544552497:NewCB4MUXQuicklook'

  #NewAWFISceneSubscription:
  #  Type: 'AWS::SNS::Subscription'
  #  Properties:
  #    Endpoint: !GetAtt NewScenesQueue.Arn
  #    Protocol: 'sqs'
  #    TopicArn: 'arn:aws:sns:us-east-1:599544552497:NewCB4AWFIQuicklook'

  #NewPAN10SceneSubscription:
  #  Type: 'AWS::SNS::Subscription'
  #  Properties:
  #    Endpoint: !GetAtt NewScenesQueue.Arn
  #    Protocol: 'sqs'
  #    TopicArn: 'arn:aws:sns:us-east-1:599544552497:NewCB4PAN10MQuicklook'

  #NewPAN5SceneSubscription:
  #  Type: 'AWS::SNS::Subscription'
  #  Properties:
  #    Endpoint: !GetAtt NewScenesQueue.Arn
  #    Protocol: 'sqs'
  #    TopicArn: 'arn:aws:sns:us-east-1:599544552497:NewCB4PAN5MQuicklook'

  NewSceneQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action: 'SQS:SendMessage'
          Resource: !GetAtt NewScenesQueue.Arn
          Condition:
            # @todo improve by specifying only the allowed Arns, removing '*'
            ArnEquals:
              aws:SourceArn: 'arn:aws:sns:us-east-1:599544552497:*'
      Queues:
        - !Ref NewScenesQueue

  NewScenesQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      # @todo Adjust batch size
      BatchSize: 10
      EventSourceArn: !GetAtt [NewScenesQueue, Arn]
      FunctionName: !Ref ProcessNewSceneQueueFunction
      Enabled: True

  # This queue expects messages of S3 prefixes
  # Each prefix is searched for .jpg files and a message
  # emulating a 'NewScene' is emulated and sent to the queue responsible
  # to update the static STAC catalog
  ReconcileQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn:    
            "Fn::GetAtt":       
              - ConsumeReconcileQueueFunctionDLQ
              - Arn                     
        maxReceiveCount: 1

  ReconcileQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      # @todo try to increase batch size depending on measured
      # lambda execution time
      BatchSize: 10
      EventSourceArn: !GetAtt [ReconcileQueue, Arn]
      FunctionName: !Ref ConsumeReconcileQueueFunction
      Enabled: True

  # This queue receives prefixes of STAC catalogs
  # that need to be updated
  CatalogPrefixUpdateQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60

  CatalogPrefixUpdateQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      # @todo Adjust batch size
      BatchSize: 10
      EventSourceArn: !GetAtt [CatalogPrefixUpdateQueue, Arn]
      FunctionName: !Ref UpdateCatalogPrefixFunction

  #################################################
  # SQS/Subscription end
  #################################################

  #################################################
  # Lambda start (include dead letter queues)
  #################################################

  GeneralLambdaDLQ: 
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  ProcessNewSceneQueueFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: process_new_scene_queue
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: Process new scenes in queue
      # This timeout is suitable for SQS/Lambda triggers,
      # which is limited to 10 messages per lambda call
      Timeout: 55
      Environment:
        Variables:
          SNS_TARGET_ARN: !Ref CBERSSTACItemTopic
          CATALOG_UPDATE_TABLE: !Ref CatalogUpdateTable
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt ProcessNewSceneQueueFunctionDLQ.Arn

  ProcessNewSceneQueueFunctionDLQ: 
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
  
  PopulateReconcileQueueFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: populate_reconcile_queue
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: Populates reconcile queue with S3 keys from a common prefix
      Timeout: 300
      Environment:
        Variables:
          RECONCILE_QUEUE: !Ref ReconcileQueue
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  GenerateCatalogLevelsToBeUpdatedFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: generate_catalog_levels_to_be_updated
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: Generate levels into output table from input table
      Timeout: 300
      Environment:
        Variables:
          CATALOG_UPDATE_TABLE: !Ref CatalogUpdateTable
          CATALOG_PREFIX_UPDATE_QUEUE: !Ref CatalogPrefixUpdateQueue
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  UpdateCatalogPrefixFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: update_catalog_tree
      Handler: code.trigger_handler
      Role: !GetAtt LambdaRole.Arn
      Policies:
      Description: >
        Update catalog from prefix
      Timeout: 55
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  ConsumeReconcileQueueFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: consume_reconcile_queue
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: >
        Consume dirs from reconcile queue, populating
        NewScenesQueue with quicklooks to be processed
      # This timeout is big since this function list the quicklooks
      # for whole S3 prefix, this may take a long time if we choose
      # to reconcile from root. This may be improved if the reconcile
      # queue is populated with all child prefixes instead of a single
      # one.
      Timeout: 295
      Environment:
        Variables:
          NEW_SCENES_QUEUE: !Ref NewScenesQueue
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt ConsumeReconcileQueueFunctionDLQ.Arn

  ConsumeReconcileQueueFunctionDLQ: 
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  SQSKeepAliveFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: sqs_keep_alive
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: >
        Iterates through SQS list to keep them active for
        Cloudwatch alarms.
        Not being used for the moment since the monitored
        queues will be activated when new messages are written,
        this is enough for the alarms to be generated.
      Timeout: 15
      Environment:
        Variables:
          QUEUES_URLS: !Join [',', [!Ref ConsumeReconcileQueueFunctionDLQ]]
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt ConsumeReconcileQueueFunctionDLQ.Arn

  #################################################
  # Lambda end
  #################################################

  #################################################
  # Rule start
  #################################################

  GenerateCatalogLevels:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Generate catalog levels to be updated every hour'
      State: 'ENABLED'
      ScheduleExpression: 'cron(00 */1 * * ? *)'
      Targets:
      - Arn: !GetAtt GenerateCatalogLevelsToBeUpdatedFunction.Arn
        Id: "GCLTBU"

  GenerateCatalogLevelsPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt GenerateCatalogLevelsToBeUpdatedFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt GenerateCatalogLevels.Arn

  #################################################
  # Rule end
  #################################################

  #################################################
  # DynamoDB start
  #################################################

  # Holds all STAC item keys generated since last
  # catalog files upate procedure
  CatalogUpdateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "stacitem"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "stacitem"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"

  #################################################
  # DynamoDB end
  #################################################
