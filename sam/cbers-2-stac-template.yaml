AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Update CBERS STAC catalog'

Parameters:
  StackName:
    Type: String
  STACBucket:
    Type: String
  OperatorEmail:
    Type: String

Globals:
  Function:
    Runtime: python3.6
    Environment:
      Variables:
        CBERS_PDS_BUCKET: cbers-pds
        CBERS_META_PDS_BUCKET: cbers-meta-pds
        CBERS_STAC_BUCKET: !Ref STACBucket
        DELETE_MESSAGES: 1

Resources:

  #################################################
  # Loggroup start
  #################################################

  TaskLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7

  #################################################
  # Loggroup end
  #################################################

  #################################################
  # Roles start
  #################################################

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        #- "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"
        # @todo check if ReadOnlyAccess is needed with FullAccess
        #- "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonESFullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"

      Path: "/"

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  #################################################
  # Roles end
  #################################################

  #################################################
  # SNS Topic start
  #################################################

  CBERSSTACItemTopic:
    Type: 'AWS::SNS::Topic'

  CBERSSTACItemTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
          - Sid: CB_OWN_STATEMENT_ID
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:Publish
              - SNS:Receive
            Resource: !Ref CBERSSTACItemTopic
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
          - Sid: CB_PUBLIC_SUBSCRIPTION_ID
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:Subscribe
              - SNS:Receive
            Resource: !Ref CBERSSTACItemTopic
            Condition:
              StringEquals:
                SNS:Protocol:
                  - sqs
                  - lambda
      Topics:
        - !Ref CBERSSTACItemTopic

  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - 
          Endpoint: !Ref OperatorEmail
          Protocol: "email"

  #################################################
  # SNS Topic End
  #################################################

  #################################################
  # Cloudwatch start
  #################################################

  DLQDepthAlarmProcessNewScene:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'ProcessNewSceneQueueFunctionDLQ with more than one message'
      ActionsEnabled: True
      Namespace: 'AWS/SQS'
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Dimensions:
        - Name: 'QueueName'
          Value: !GetAtt ProcessNewSceneQueueFunctionDLQ.QueueName
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0.0
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - !Ref AlarmTopic
      # See comment in sqs_keep_alive for rationale behind
      # removing this alarm action
      #InsufficientDataActions:
      #  - !Ref AlarmTopic

  DLQDepthAlarmConsumeReconcile:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'ConsumeReconcileQueueFunctionDLQ with more than one message'
      ActionsEnabled: True
      Namespace: 'AWS/SQS'
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Dimensions:
        - Name: 'QueueName'
          Value: !GetAtt ConsumeReconcileQueueFunctionDLQ.QueueName
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0.0
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - !Ref AlarmTopic

  DLQDepthGeneral:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'GeneralDLQ with more than one message'
      ActionsEnabled: True
      Namespace: 'AWS/SQS'
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Dimensions:
        - Name: 'QueueName'
          Value: !GetAtt GeneralLambdaDLQ.QueueName
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0.0
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - !Ref AlarmTopic

  #################################################
  # Cloudwatch end
  #################################################

  #################################################
  # SQS(with triggers)/Subscription start 
  #################################################

  NewScenesQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 385
      RedrivePolicy:
        deadLetterTargetArn:    
            "Fn::GetAtt":
              - ProcessNewSceneQueueFunctionDLQ
              - Arn                     
        maxReceiveCount: 3

  # This queue is subscribed to topics from all quicklooks,
  NewMUXSceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:599544552497:NewCB4MUXQuicklook'

  NewAWFISceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:599544552497:NewCB4AWFIQuicklook'

  NewPAN10SceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:599544552497:NewCB4PAN10MQuicklook'

  NewPAN5SceneSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt NewScenesQueue.Arn
      Protocol: 'sqs'
      TopicArn: 'arn:aws:sns:us-east-1:599544552497:NewCB4PAN5MQuicklook'

  NewSceneQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action: 'SQS:SendMessage'
          Resource: !GetAtt NewScenesQueue.Arn
          Condition:
            # @todo improve by specifying only the allowed Arns, removing '*'
            ArnEquals:
              aws:SourceArn: 'arn:aws:sns:us-east-1:599544552497:*'
      Queues:
        - !Ref NewScenesQueue

  NewScenesQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt [NewScenesQueue, Arn]
      FunctionName: !Ref ProcessNewSceneQueueFunction
      Enabled: True

  # This queue expects messages of S3 prefixes
  # Each prefix is searched for .jpg files and a message
  # emulating a 'NewScene' is emulated and sent to the queue responsible
  # to update the static STAC catalog
  ReconcileQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 1000
      RedrivePolicy:
        deadLetterTargetArn:    
            "Fn::GetAtt":       
              - ConsumeReconcileQueueFunctionDLQ
              - Arn                     
        maxReceiveCount: 3

  ReconcileQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      # Limit to 5 directories for each lambda execution, listing
      # searching for .jpg may take a long time
      BatchSize: 5
      EventSourceArn: !GetAtt [ReconcileQueue, Arn]
      FunctionName: !Ref ConsumeReconcileQueueFunction
      Enabled: True

  # This queue receives prefixes of STAC catalogs
  # that need to be updated
  CatalogPrefixUpdateQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn:    
            "Fn::GetAtt":
              - GeneralLambdaDLQ
              - Arn                     
        maxReceiveCount: 3

  CatalogPrefixUpdateQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt [CatalogPrefixUpdateQueue, Arn]
      FunctionName: !Ref UpdateCatalogPrefixFunction

  # This queue subscribes to the new STAC item SNS topic
  # and has a lambda trigger that inserts the item into
  # the search backend (Elasticsearch for now)
  InsertIntoElasticsearchQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
      # This needs to be updated when the timeout for
      # ConsumeInsertIntoElasticsearchQueueFunction is
      # chaged, use 5-6 times the timeout value
      VisibilityTimeout: 180

  InsertIntoElasticsearchSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt InsertIntoElasticsearchQueue.Arn
      Protocol: 'sqs'
      TopicArn: !Ref CBERSSTACItemTopic

  InsertIntoElasticsearchQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action: 'SQS:SendMessage'
          Resource: !GetAtt InsertIntoElasticsearchQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref CBERSSTACItemTopic
      Queues:
        - !Ref InsertIntoElasticsearchQueue

  InsertIntoElasticsearchQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt [InsertIntoElasticsearchQueue, Arn]
      FunctionName: !Ref ConsumeInsertIntoElasticsearchQueueFunction

  #################################################
  # SQS/Subscription end
  #################################################

  #################################################
  # Api Gateway start
  #################################################

  ApiAccount:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt ApiGatewayRole.Arn

  StacApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        'Fn::Transform':
           Name: 'AWS::Include'
           Parameters:
             Location: STAC07-query.yaml
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          LoggingLevel: ERROR      # INFO or ERROR
          DataTraceEnabled: true  # Put logs into cloudwatch
          #MetricsEnabled: true    # Enable detailed metrics (error 404, latence, ...)

  #################################################
  # Api Gateway end
  #################################################

  #################################################
  # Lambda start (include dead letter queues)
  #################################################

  GeneralLambdaDLQ: 
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  DLQReplayFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: dlq_replay
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: Move messages from 'source_queue' to 'target_queue'
      Timeout: 55
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  ProcessNewSceneQueueFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: process_new_scene_queue
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: Process new scenes in queue
      # This timeout is suitable for SQS/Lambda triggers,
      # which is limited to 10 messages per lambda call
      Timeout: 55
      Environment:
        Variables:
          SNS_TARGET_ARN: !Ref CBERSSTACItemTopic
          CATALOG_UPDATE_TABLE: !Ref CatalogUpdateTable
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt ProcessNewSceneQueueFunctionDLQ.Arn

  ProcessNewSceneQueueFunctionDLQ: 
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
  
  PopulateReconcileQueueFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: populate_reconcile_queue
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: Populates reconcile queue with S3 keys from a common prefix
      Timeout: 300
      Environment:
        Variables:
          RECONCILE_QUEUE: !Ref ReconcileQueue
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  GenerateCatalogLevelsToBeUpdatedFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: generate_catalog_levels_to_be_updated
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: Generate levels into output table from input table
      Timeout: 900
      Environment:
        Variables:
          CATALOG_UPDATE_TABLE: !Ref CatalogUpdateTable
          CATALOG_PREFIX_UPDATE_QUEUE: !Ref CatalogPrefixUpdateQueue
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  UpdateCatalogPrefixFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: update_catalog_tree
      Handler: code.trigger_handler
      Role: !GetAtt LambdaRole.Arn
      Policies:
      Description: >
        Update catalog from prefix
      Timeout: 55
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  CreateElasticIndexFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: elasticsearch
      Handler: es.create_stac_index_handler
      Role: !GetAtt LambdaRole.Arn
      Policies:
      # Dependencies (check ES version):
      # $pip install Elasticsearch==6.2.0 elasticsearch-dsl==6.2.0 requests "urllib3<1.23,>=1.21.1" aws-requests-auth -t ./
      Description: >
        Create Elasticsearch STAC index
      Timeout: 30
      Environment:
        Variables:
          ES_ENDPOINT: !GetAtt Elasticsearch.DomainEndpoint
          ES_PORT: 443
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  ConsumeReconcileQueueFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: consume_reconcile_queue
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: >
        Consume dirs from reconcile queue, populating
        NewScenesQueue with quicklooks to be processed
      # This timeout is big since this function list the quicklooks
      # for whole S3 prefix, this may take a long time if we choose
      # to reconcile from root. This may be improved if the reconcile
      # queue is populated with all children prefixes instead of a single
      # one.
      Timeout: 900
      # Limit the number of instances simultaneously
      # accessing S3 for listing
      # ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          NEW_SCENES_QUEUE: !Ref NewScenesQueue
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt ConsumeReconcileQueueFunctionDLQ.Arn

  ConsumeInsertIntoElasticsearchQueueFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: elasticsearch
      Handler: es.create_documents_handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: >
        Consume STAC items from queue, inserting into ES
      # Visibity timeout for InsertIntoElasticsearchQueue needs
      # to be updated when timeout changes, use 5-6x as guideline
      Timeout: 30
      # Concurrent executions tuned to work with t2.small.elasticsearch
      ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          ES_ENDPOINT: !GetAtt Elasticsearch.DomainEndpoint
          ES_PORT: 443
          # @todo configure this as template parameter
          ES_STRIPPED: YES
          BULK_CALLS: 1
          BULK_SIZE: 10
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  StacEndpointFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: stac_endpoint
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies:
      Description: >
        stac API endpoint
      Timeout: 55
      Events:
        # This information is not injected in the swagger template,
        # see https://github.com/awslabs/serverless-application-model/issues/8#issuecomment-290212883
        # If the lambda changes then the swagger file must be changed
        StacEndpointApi:
          Type: Api
          Properties:
            RestApiId: !Ref StacApi
            Path: /stac
            Method: ANY
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  # See https://github.com/awslabs/serverless-application-model/issues/59
  # This not seems to be needed aymore, keeping as reference just in case
  #StacEndpointPermission:
  #  Type: "AWS::Lambda::Permission"
  #  Properties:
  #    Action: lambda:InvokeFunction
  #    FunctionName: !Ref StacEndpointFunction
  #    Principal: apigateway.amazonaws.com
  #    #SourceARN: arn:aws:execute-api:<region>:<accountNumber>:<restApiId>/<stage>/<method>/<path>

  StacSearchEndpointFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: elasticsearch
      Handler: es.stac_search_endpoint_handler
      Role: !GetAtt LambdaRole.Arn
      Policies:
      Description: >
        stac/search API endpoint
      Timeout: 55
      Environment:
        Variables:
          ES_ENDPOINT: !GetAtt Elasticsearch.DomainEndpoint
          ES_PORT: 443
          ES_SSL: YES
      Events:
        # Attention! See comment above about endpoint
        StacEndpointApi:
          Type: Api
          Properties:
            RestApiId: !Ref StacApi
            Path: /stac/search
            Method: ANY
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GeneralLambdaDLQ.Arn

  ConsumeReconcileQueueFunctionDLQ: 
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  SQSKeepAliveFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: sqs_keep_alive
      Handler: code.handler
      Role: !GetAtt LambdaRole.Arn
      Policies: 
      Description: >
        Iterates through SQS list to keep them active for
        Cloudwatch alarms.
        Not being used for the moment since the monitored
        queues will be activated when new messages are written,
        this is enough for the alarms to be generated.
      Timeout: 15
      Environment:
        Variables:
          QUEUES_URLS: !Join [',', [!Ref ConsumeReconcileQueueFunctionDLQ]]
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt ConsumeReconcileQueueFunctionDLQ.Arn

  #################################################
  # Lambda end
  #################################################

  #################################################
  # Rule start
  #################################################

  GenerateCatalogLevels:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Generate catalog levels to be updated every hour'
      State: 'ENABLED'
      ScheduleExpression: 'cron(00 */1 * * ? *)'
      Targets:
      - Arn: !GetAtt GenerateCatalogLevelsToBeUpdatedFunction.Arn
        Id: "GCLTBU"

  GenerateCatalogLevelsPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt GenerateCatalogLevelsToBeUpdatedFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt GenerateCatalogLevels.Arn

  #################################################
  # Rule end
  #################################################

  #################################################
  # DynamoDB start
  #################################################

  # Holds all STAC item keys generated since last
  # catalog files upate procedure
  CatalogUpdateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "stacitem"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "stacitem"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"

  #################################################
  # DynamoDB end
  #################################################

  #################################################
  # Elasticsearch start
  #################################################

  Elasticsearch:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Sub "${StackName}-es"
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !GetAtt [LambdaRole, Arn]
            Action: "es:*"
            Resource:
              - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${StackName}-es/*"
      #AdvancedOptions:
      #  String: String
      # EBSOptions required for t2.small
      EBSOptions:
        EBSEnabled: True
        #Iops: Integer
        # In GiB, 10 is the smallest possible for t2.small
        # medium instance value must be between 10 and 35
        # https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/aes-limits.html
        # Using 10 GiB for testing
        #VolumeSize: 35
        VolumeSize: 10
        VolumeType: gp2        
      ElasticsearchClusterConfig:
        #DedicatedMasterCount: Integer
        #DedicatedMasterEnabled: Boolean
        #DedicatedMasterType: String
        InstanceCount: 1
        # t2.micro only supports 2.3 and 1.5
        # t2.small volume size must be between 10 and 35
        InstanceType: t2.small.elasticsearch
        #InstanceType: m3.medium.elasticsearch
        #InstanceType: c4.large.elasticsearch
        #InstanceType: c4.xlarge.elasticsearch
        #InstanceType: c4.8xlarge.elasticsearch
        #InstanceType: m4.large.elasticsearch
        #ZoneAwarenessEnabled: Boolean
      ElasticsearchVersion: 6.2
      #EncryptionAtRestOptions: 
      #  EncryptionAtRestOptions
      #SnapshotOptions:
      #  SnapshotOptions
      #Tags:
      #  - Resource Tag
      #VPCOptions: 
      #  VPCOptions
                       
  #################################################
  # Elasticsearch end
  #################################################

Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref StacApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com'
